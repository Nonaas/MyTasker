@page "/"
@inject ILogger<Home> _logger
@inject IStatsService _statsService


<div class="header-container">
    <div class="title-container">
        <h1>Meine<br />Aufgaben</h1>
    </div>

    <div class="stats-container">
        <div class="level">
            <p>Level: <span>@_statsService.MyLevel</span></p>
        </div>

        <div class="xp-container">
            <p>XP: <span>@_statsService.MyXP</span></p>
            <div class="progress-bar">
                <div class="progress-bar-fill" style="width: @_statsService.GetXPPercentage()%;"></div>
            </div>
            <p>@_statsService.GetXPPercentage()% bis zum nächsten Level</p>
        </div>
    </div>

    <div class="button-container">
        <button class="btn btn-primary" @onclick="AddNewTodo">Aufgabe hinzufügen</button>
        <button class="btn btn-danger" @onclick="DeleteDoneTodos">Abgeschlossene Aufgaben löschen</button>
    </div>
</div>

<div class="todo-container">
    <h2>Offene Aufgaben:</h2>
    <div class="todo-section">
        <div class="card">
            <ul>
                @foreach (ToDo todo in MyTodosOpen)
                {
                    <li>
                        <input type="checkbox" @bind="todo.Done" @onclick="(e => MarkTodoDone(todo))" />
                        @todo.Description
                    </li>
                }
            </ul>
        </div>
    </div>

    <h2>Abgeschlossene Aufgaben:</h2>
    <div class="todo-section">
        <div class="card completed">
            <ul>
                @foreach (ToDo todo in MyTodosDone)
                {
                    <li>
                        <strike>
                            <input type="checkbox" @bind="todo.Done" @onclick="(e => MarkTodoOpen(todo))" />
                            @todo.Description
                        </strike>
                    </li>
                }
            </ul>
        </div>
    </div>
</div>


@code {
    private List<ToDo> _myTodosOpen = new();
    public List<ToDo> MyTodosOpen
    {
        get { return _myTodosOpen; }
        set
        {
            _myTodosOpen = value;
        }
    }
    private List<ToDo> _myTodosDone = new();
    public List<ToDo> MyTodosDone { 
        get{return _myTodosDone;} 
        set
        {
            _myTodosDone = value;
        } 
    }

    protected override async void OnInitialized()
    {
        // Fetch from db
        MyTodosOpen = await App.Database!.GetToDosAsync(false);
        MyTodosDone = await App.Database.GetToDosAsync(true);
        App.Stats = await App.Database.GetStatsAsync();

        // Set user stats
        _statsService.MyLevel = App.Stats.CurrentLevel;
        _statsService.MyXP = App.Stats.CurrentXP;

        _logger.LogDebug($"Finished initializing home page");

        StateHasChanged();
    }

    #region Quick-ToDo Logic

    private async void MarkTodoDone(ToDo todo)
    {
        todo.Done = true;

        if(!todo.Redeemed)
        {
            _statsService.AddXP(10);
            await App.Database!.UpdateStatsAsync(_statsService.MyLevel, _statsService.MyXP, _statsService.XPforNextLevel);
            todo.Redeemed = true;
        }

        MyTodosOpen.Remove(todo);
        MyTodosDone.Add(todo);

        await App.Database!.UpdateToDoAsync(todo);

        SortAllEntries();

        StateHasChanged();

        _logger.LogDebug($"Marked todo done.");
    }

    private async void MarkTodoOpen(ToDo todo)
    {
        todo.Done = false;

        MyTodosDone.Remove(todo);
        MyTodosOpen.Add(todo);

        await App.Database!.UpdateToDoAsync(todo);

        SortAllEntries();

        StateHasChanged();

        _logger.LogDebug($"Marked todo open.");
    }

    private async void AddNewTodo()
    {
        string newTodoInput = await Application.Current!.Windows[0].Page!.DisplayPromptAsync(
            "Hinzufügen", 
            "Neues ToDo hinzufügen", 
            "Bestätigen", "Abbrechen", 
            "Meine neue Aufgabe",   // Placeholder
            -1,     // Max Length
            Keyboard.Text
        );

        if (string.IsNullOrWhiteSpace(newTodoInput)) return;

        ToDo newTodo = new()
        {
            Description = newTodoInput.Trim()
        };
        MyTodosOpen.Add(newTodo);

        int rows = await App.Database!.SaveToDoAsync(newTodo);
        _logger.LogDebug($"INSERT - rows modified= " + rows);
        SortAllEntries();

        StateHasChanged();

        _logger.LogDebug($"Added new todo.");
    }

    private async void DeleteDoneTodos()
    {
        bool confirm = await Application.Current!.Windows[0].Page!.DisplayAlert(
            "Löschen", 
            "Alle abgeschlossenen Aufgaben löschen?", 
            "Ja", 
            "Nein"
        );

        if (confirm)
        {
            MyTodosDone.Clear();

            await App.Database!.DeleteAllDoneTodosAsync();

            StateHasChanged();
        }
    }

    private void SortAllEntries()
    {
        // Sorting
        MyTodosOpen = MyTodosOpen.OrderByDescending(todo => todo.Id).ToList();
        MyTodosDone = MyTodosDone.OrderByDescending(todo => todo.Id).ToList();
    }

    #endregion

}
