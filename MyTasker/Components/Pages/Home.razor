@page "/"
@inject ILogger<Home> logger


<h1>My Tasker</h1>
<p>Welcome to <i>My Tasker</i> !</p>

<button class="btn btn-primary" @onclick="AddNewTodo">ToDo hinzufügen</button>
<div class="todo-container">
    <h2>Offene Aufgaben:</h2>
    <div class="todo-section">
        <ul>
            @foreach (ToDo todo in MyTodosOpen)
            {
                <li>
                    <input type="checkbox" @bind="todo.Done" @onclick="(e => MarkTodoDone(todo))" />
                    @todo.Description
                </li>
            }
        </ul>
    </div>
    <h2>Abgeschlossen:</h2>
    <div class="todo-section">
        <ul>
            @foreach (ToDo todo in MyTodosDone)
            {
                <li>
                    <strike>
                        <input type="checkbox" @bind="todo.Done" @onclick="(e => MarkTodoOpen(todo))" />
                        @todo.Description
                    </strike>
                </li>
            }
        </ul>
    </div>
</div>


@code {
    private List<ToDo> _myTodosOpen = new();
    public List<ToDo> MyTodosOpen
    {
        get { return _myTodosOpen; }
        set
        {
            _myTodosOpen = value;
            SortAllEntries();
        }
    }
    private List<ToDo> _myTodosDone = new();
    public List<ToDo> MyTodosDone { 
        get{return _myTodosDone;} 
        set
        {
            _myTodosDone = value;
            SortAllEntries();
        } 
    }

    protected override void OnInitialized()
    {
        ToDo myTodo1 = new ToDo("ToDo Nummer 1", false);
        ToDo myTodo2 = new ToDo("ToDo Nummer 2", false);
        ToDo myTodo3 = new ToDo("ToDo Nummer 3", false);

        MyTodosOpen.Add(myTodo1);
        MyTodosOpen.Add(myTodo2);
        MyTodosOpen.Add(myTodo3);
    }

    private void MarkTodoDone(ToDo todo)
    {
        todo.Done = true;

        MyTodosOpen.Remove(todo);
        MyTodosDone.Add(todo);

        logger.LogDebug($"Marked todo done.");
    }

    private void MarkTodoOpen(ToDo todo)
    {
        todo.Done = false;

        MyTodosDone.Remove(todo);
        MyTodosOpen.Add(todo);

        logger.LogDebug($"Marked todo open.");
    }

    private void SortAllEntries()
    {
        // Sorting 
        MyTodosOpen = MyTodosOpen.OrderBy(todo => todo.Description).ToList();
        MyTodosDone = MyTodosDone.OrderBy(todo => todo.Description).ToList();
    }

    private async void AddNewTodo()
    {
        string newTodoInput = await Application.Current!.Windows[0].Page!.DisplayPromptAsync(
            "Hinzufügen", 
            "Neues ToDo hinzufügen", 
            "Bestätigen", "Abbrechen", 
            null,   // Placeholder
            -1,     // Max Length
            Keyboard.Text
        );

        ToDo newTodo = new(newTodoInput.Trim(), false);
        MyTodosOpen.Add(newTodo);

        StateHasChanged();

        logger.LogDebug($"Added new todo.");
    }

}
