@page "/calendar"
@attribute [StreamRendering]
@inject ILogger<Calendar> _logger
@inject IStatsService _statsService
@inject DialogService _dialogService
@inject INotificationManagerService _notificationService


<div class="title-container">
    <h1>Mein Kalendar</h1>
</div>


<RadzenScheduler @ref=@scheduler SlotRender=@OnSlotRender Style="min-height: 75vh;" TItem="Appointment" Data=@_appointments StartProperty="Start" EndProperty="End"
TextProperty="Text" SelectedIndex="2"
SlotSelect=@OnSlotSelect AppointmentSelect=@OnAppointmentSelect AppointmentRender=@OnAppointmentRender
AppointmentMove=@OnAppointmentMove >
    <RadzenDayView />
    <RadzenWeekView />
    <RadzenMonthView />
</RadzenScheduler>


@code {
    RadzenScheduler<Appointment>? scheduler;
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    private List<Appointment> _appointments = new();
    public List<Appointment> Appointments
    {
        get { return _appointments; }
        set
        {
            _appointments = value;
        }
    }


    protected override async void OnInitialized()
    {
        // Dictionary<string, string> args = new();
        // args.Add("StartingPage", "calendar");
        // _notificationService.SendNotification(
        //     "Mein Kalendar", 
        //     "Klicken um zu deinem Kalendar zurückzukehren.", 
        //     DateTime.Now.AddSeconds(5), 
        //     args);

        _appointments = await App.DatabaseTodos!.GetAppointmentsAsync();

        StateHasChanged();

        // Either call the Reload method or reassign the Data property of the Scheduler
        await scheduler!.Reload();

    }

    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: var(--rz-scheduler-highlight-background-color, rgba(255,220,40,.2));";
        }

        // Highlight working hours (9-18)
        if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 19)
        {
            args.Attributes["style"] = "background: var(--rz-scheduler-highlight-background-color, rgba(255,220,40,.2));";
        }
    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        _logger.LogDebug($"SlotSelect: Start={args.Start} End={args.End}");

        if (args.View.Text != "Year")
        {
            Appointment data = await _dialogService.OpenAsync<AppointmentPage>(
                "Termin hinzufügen",
                new Dictionary<string, object> { { "Start", args.Start }, { "End", args.End } }, 
                new DialogOptions() { CloseDialogOnOverlayClick = true });

            if (data != null)
            {
                _appointments.Add(data);

                await App.DatabaseTodos!.InsertAppointmentAsync(data);

                StateHasChanged();

                // Either call the Reload method or reassign the Data property of the Scheduler
                await scheduler!.Reload();

            }
        }
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Appointment> args)
    {
        _logger.LogDebug($"AppointmentSelect: Appointment={args.Data.Text}");

        var copy = new Appointment
        {
            Start = args.Data.Start,
            End = args.Data.End,
            Text = args.Data.Text,
            WholeDay = args.Data.WholeDay,
            Color = args.Data.Color
        };

        var data = await _dialogService.OpenAsync<AppointmentPage>(
            "Termin bearbeiten", 
            new Dictionary<string, object> { { "Appointment", copy } },
            new DialogOptions() { CloseDialogOnOverlayClick = true });

        if (data != null)
        {
            // Update the appointment
            args.Data.Start = data.Start;
            args.Data.End = data.End;
            args.Data.Text = data.Text;
            args.Data.WholeDay = data.WholeDay;
            args.Data.Color = data.Color;

            await App.DatabaseTodos!.UpdateAppointmentAsync(data);

            StateHasChanged();
        }

        await scheduler!.Reload();
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Appointment> args)
    {
        // Never call StateHasChanged in AppointmentRender - would lead to infinite loop

        if (!string.IsNullOrEmpty(args.Data.Color))
        {
            args.Attributes["style"] = $"background: {args.Data.Color}";
        }
        if (args.Data.Text == "Geburtstag")
        {
            args.Attributes["style"] = "background: red";
        }
    }

    async Task OnAppointmentMove(SchedulerAppointmentMoveEventArgs args)
    {
        var draggedAppointment = _appointments.FirstOrDefault(x => x == args.Appointment.Data);
        if (draggedAppointment != null)
        {
            draggedAppointment.Start = draggedAppointment.Start + args.TimeSpan;

            draggedAppointment.End = draggedAppointment.End + args.TimeSpan;

            await App.DatabaseTodos!.UpdateAppointmentAsync(draggedAppointment);

            StateHasChanged();

            await scheduler!.Reload();
        }
    }
}